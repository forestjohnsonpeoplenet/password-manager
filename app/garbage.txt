this.getPhraseFromKey = (key) => {
    if(key.length != lengthOfKeySegment*numberOfWordsInPhrase) {
      return new Error('incorrect key length');
    }
    var i = 0;
    var phrase = [];
    while(i < numberOfWordsInPhrase) {
      i++;
      var keySegment = key.substring((i-1)*lengthOfKeySegment, i*lengthOfKeySegment);
      var wordIndex = Number(keySegment);
      if(wordIndex == NaN || wordIndex < 0 || wordIndex >= words.length) {
        return new Error(`invalid key format in segment '${keySegment}'.`);
      }
      phrase.push(words[wordIndex]);
    }
    return phrase.join(' ');
  };
  this.getKeyFromPhrase = (phraseString) => {
    var phrase = phraseString.toLowerCase().split(' ');

    var result = phrase.reduce((key, word) => {
      if(typeof key == 'object') {
        return key;
      }
      var wordIndex = words.indexOf(word);
      if(wordIndex == -1) {
        return new Error(`unknown word '${word}'.`);
      }
      return key + pad(wordIndex, lengthOfKeySegment)
    }, '');

    if(typeof result == 'object') {
      return result;
    }

    if(phrase.length != numberOfWordsInPhrase) {
      return new Error(`incorrect phrase length: ${phrase.length}. expected ${numberOfWordsInPhrase} space separated words.`);
    }

    return result;
  };

  var pad = (num, size) => {
    var s = num+"";
    while (s.length < size) s = "0" + s;
    return s;
  };